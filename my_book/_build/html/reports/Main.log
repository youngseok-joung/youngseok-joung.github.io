Traceback (most recent call last):
  File "c:\users\ryanjoung\.conda\envs\mybook\lib\site-packages\jupyter_cache\executors\utils.py", line 51, in single_nb_execution
    executenb(
  File "c:\users\ryanjoung\.conda\envs\mybook\lib\site-packages\nbclient\client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "c:\users\ryanjoung\.conda\envs\mybook\lib\site-packages\nbclient\util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "c:\users\ryanjoung\.conda\envs\mybook\lib\site-packages\nbclient\util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "c:\users\ryanjoung\.conda\envs\mybook\lib\asyncio\base_events.py", line 616, in run_until_complete
    return future.result()
  File "c:\users\ryanjoung\.conda\envs\mybook\lib\site-packages\nbclient\client.py", line 553, in async_execute
    await self.async_execute_cell(
  File "c:\users\ryanjoung\.conda\envs\mybook\lib\site-packages\nbclient\client.py", line 857, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "c:\users\ryanjoung\.conda\envs\mybook\lib\site-packages\nbclient\client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix, zero_one_loss
import matplotlib.pyplot as plt

# Must declare data_dir as the directory of training and test files
data_dir = "./dataset/"

train_data = data_dir + "kddcup.data_10_percent_corrected"

names = ["duration","protocol_type","service","flag","src_bytes",
    "dst_bytes","land","wrong_fragment","urgent","hot","num_failed_logins",
    "logged_in","num_compromised","root_shell","su_attempted","num_root",
    "num_file_creations","num_shells","num_access_files","num_outbound_cmds",
    "is_host_login","is_guest_login","count","srv_count","serror_rate",
    "srv_serror_rate","rerror_rate","srv_rerror_rate","same_srv_rate",
    "diff_srv_rate","srv_diff_host_rate","dst_host_count","dst_host_srv_count",
    "dst_host_same_srv_rate","dst_host_diff_srv_rate","dst_host_same_src_port_rate",
    "dst_host_srv_diff_host_rate","dst_host_serror_rate","dst_host_srv_serror_rate",
    "dst_host_rerror_rate","dst_host_srv_rerror_rate","label"]

df = pd.read_csv(train_data, names=names)
print(df.describe())

print(df.shape)
print(df['label'].value_counts())


# Divide by class
df_normal = df[df['label'] == 'normal.']
df_neptune = df[df['label'] == 'neptune.']
df_back = df[df['label'] == 'back.']
df_teardrop = df[df['label'] == 'teardrop.']
df_satan = df[df['label'] == 'satan.']
df_warezclient = df[df['label'] == 'warezclient.']
df_ipsweep = df[df['label'] == 'ipsweep.']
df_smurf = df[df['label'] == 'smurf.']
df_portsweep = df[df['label'] == 'portsweep.']
df_pod = df[df['label'] == 'pod.']
df_nmap = df[df['label'] == 'nmap.']
df_guess_passwd = df[df['label'] == 'guess_passwd.']
df_buffer_overflow = df[df['label'] == 'buffer_overflow.']
df_warezmaster = df[df['label'] == 'warezmaster.']
df_land = df[df['label'] == 'land.']
df_imap = df[df['label'] == 'imap.']
df_rootkit = df[df['label'] == 'rootkit.']
df_loadmodule = df[df['label'] == 'loadmodule.']
df_ftp_write = df[df['label'] == 'ftp_write.']
df_multihop = df[df['label'] == 'multihop.']
df_phf = df[df['label'] == 'phf.']
df_perl = df[df['label'] == 'perl.']
df_spy = df[df['label'] == 'spy.']

df = pd.concat([df_normal, df_neptune, df_smurf], axis=0)

df.drop('num_outbound_cmds', axis=1, inplace=True)
df.drop('is_host_login', axis=1, inplace=True)
df['protocol_type'] = df['protocol_type'].astype('category')
df['service'] = df['service'].astype('category')
df['flag'] = df['flag'].astype('category')
df['label'] = df['label'].astype('category')
cat_columns = df.select_dtypes(['category']).columns
df[cat_columns] = df[cat_columns].apply(lambda x: x.cat.codes)

data = df.values
Y = data[:,39]
X = data[:,0:39]
Y = Y.reshape(-1, 1)

from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler

sScaler = StandardScaler()
rescaleX = sScaler.fit_transform(X)
pca = PCA(n_components=2)
rescaleX = pca.fit_transform(rescaleX)
rescaleX = np.append(rescaleX, Y, axis=1)
principalDf = pd.DataFrame(data = rescaleX, columns = ['principal component 1', 'principal component 2', 'label'])
principalDf.head()
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mFileNotFoundError[0m                         Traceback (most recent call last)
[1;32mC:\Users\RYANJO~1\AppData\Local\Temp/ipykernel_25232/1690920269.py[0m in [0;36m<module>[1;34m[0m
[0;32m     21[0m     "dst_host_rerror_rate","dst_host_srv_rerror_rate","label"]
[0;32m     22[0m [1;33m[0m[0m
[1;32m---> 23[1;33m [0mdf[0m [1;33m=[0m [0mpd[0m[1;33m.[0m[0mread_csv[0m[1;33m([0m[0mtrain_data[0m[1;33m,[0m [0mnames[0m[1;33m=[0m[0mnames[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m     24[0m [0mprint[0m[1;33m([0m[0mdf[0m[1;33m.[0m[0mdescribe[0m[1;33m([0m[1;33m)[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m     25[0m [1;33m[0m[0m

[1;32m~\.conda\envs\mybook\lib\site-packages\pandas\util\_decorators.py[0m in [0;36mwrapper[1;34m(*args, **kwargs)[0m
[0;32m    309[0m                     [0mstacklevel[0m[1;33m=[0m[0mstacklevel[0m[1;33m,[0m[1;33m[0m[1;33m[0m[0m
[0;32m    310[0m                 )
[1;32m--> 311[1;33m             [1;32mreturn[0m [0mfunc[0m[1;33m([0m[1;33m*[0m[0margs[0m[1;33m,[0m [1;33m**[0m[0mkwargs[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    312[0m [1;33m[0m[0m
[0;32m    313[0m         [1;32mreturn[0m [0mwrapper[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\.conda\envs\mybook\lib\site-packages\pandas\io\parsers\readers.py[0m in [0;36mread_csv[1;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options)[0m
[0;32m    584[0m     [0mkwds[0m[1;33m.[0m[0mupdate[0m[1;33m([0m[0mkwds_defaults[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m    585[0m [1;33m[0m[0m
[1;32m--> 586[1;33m     [1;32mreturn[0m [0m_read[0m[1;33m([0m[0mfilepath_or_buffer[0m[1;33m,[0m [0mkwds[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    587[0m [1;33m[0m[0m
[0;32m    588[0m [1;33m[0m[0m

[1;32m~\.conda\envs\mybook\lib\site-packages\pandas\io\parsers\readers.py[0m in [0;36m_read[1;34m(filepath_or_buffer, kwds)[0m
[0;32m    480[0m [1;33m[0m[0m
[0;32m    481[0m     [1;31m# Create the parser.[0m[1;33m[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 482[1;33m     [0mparser[0m [1;33m=[0m [0mTextFileReader[0m[1;33m([0m[0mfilepath_or_buffer[0m[1;33m,[0m [1;33m**[0m[0mkwds[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    483[0m [1;33m[0m[0m
[0;32m    484[0m     [1;32mif[0m [0mchunksize[0m [1;32mor[0m [0miterator[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\.conda\envs\mybook\lib\site-packages\pandas\io\parsers\readers.py[0m in [0;36m__init__[1;34m(self, f, engine, **kwds)[0m
[0;32m    809[0m             [0mself[0m[1;33m.[0m[0moptions[0m[1;33m[[0m[1;34m"has_index_names"[0m[1;33m][0m [1;33m=[0m [0mkwds[0m[1;33m[[0m[1;34m"has_index_names"[0m[1;33m][0m[1;33m[0m[1;33m[0m[0m
[0;32m    810[0m [1;33m[0m[0m
[1;32m--> 811[1;33m         [0mself[0m[1;33m.[0m[0m_engine[0m [1;33m=[0m [0mself[0m[1;33m.[0m[0m_make_engine[0m[1;33m([0m[0mself[0m[1;33m.[0m[0mengine[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    812[0m [1;33m[0m[0m
[0;32m    813[0m     [1;32mdef[0m [0mclose[0m[1;33m([0m[0mself[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\.conda\envs\mybook\lib\site-packages\pandas\io\parsers\readers.py[0m in [0;36m_make_engine[1;34m(self, engine)[0m
[0;32m   1038[0m             )
[0;32m   1039[0m         [1;31m# error: Too many arguments for "ParserBase"[0m[1;33m[0m[1;33m[0m[1;33m[0m[0m
[1;32m-> 1040[1;33m         [1;32mreturn[0m [0mmapping[0m[1;33m[[0m[0mengine[0m[1;33m][0m[1;33m([0m[0mself[0m[1;33m.[0m[0mf[0m[1;33m,[0m [1;33m**[0m[0mself[0m[1;33m.[0m[0moptions[0m[1;33m)[0m  [1;31m# type: ignore[call-arg][0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m   1041[0m [1;33m[0m[0m
[0;32m   1042[0m     [1;32mdef[0m [0m_failover_to_python[0m[1;33m([0m[0mself[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\.conda\envs\mybook\lib\site-packages\pandas\io\parsers\c_parser_wrapper.py[0m in [0;36m__init__[1;34m(self, src, **kwds)[0m
[0;32m     49[0m [1;33m[0m[0m
[0;32m     50[0m         [1;31m# open handles[0m[1;33m[0m[1;33m[0m[1;33m[0m[0m
[1;32m---> 51[1;33m         [0mself[0m[1;33m.[0m[0m_open_handles[0m[1;33m([0m[0msrc[0m[1;33m,[0m [0mkwds[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m     52[0m         [1;32massert[0m [0mself[0m[1;33m.[0m[0mhandles[0m [1;32mis[0m [1;32mnot[0m [1;32mNone[0m[1;33m[0m[1;33m[0m[0m
[0;32m     53[0m [1;33m[0m[0m

[1;32m~\.conda\envs\mybook\lib\site-packages\pandas\io\parsers\base_parser.py[0m in [0;36m_open_handles[1;34m(self, src, kwds)[0m
[0;32m    220[0m         [0mLet[0m [0mthe[0m [0mreaders[0m [0mopen[0m [0mIOHandles[0m [0mafter[0m [0mthey[0m [0mare[0m [0mdone[0m [1;32mwith[0m [0mtheir[0m [0mpotential[0m [0mraises[0m[1;33m.[0m[1;33m[0m[1;33m[0m[0m
[0;32m    221[0m         """
[1;32m--> 222[1;33m         self.handles = get_handle(
[0m[0;32m    223[0m             [0msrc[0m[1;33m,[0m[1;33m[0m[1;33m[0m[0m
[0;32m    224[0m             [1;34m"r"[0m[1;33m,[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\.conda\envs\mybook\lib\site-packages\pandas\io\common.py[0m in [0;36mget_handle[1;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)[0m
[0;32m    700[0m         [1;32mif[0m [0mioargs[0m[1;33m.[0m[0mencoding[0m [1;32mand[0m [1;34m"b"[0m [1;32mnot[0m [1;32min[0m [0mioargs[0m[1;33m.[0m[0mmode[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    701[0m             [1;31m# Encoding[0m[1;33m[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 702[1;33m             handle = open(
[0m[0;32m    703[0m                 [0mhandle[0m[1;33m,[0m[1;33m[0m[1;33m[0m[0m
[0;32m    704[0m                 [0mioargs[0m[1;33m.[0m[0mmode[0m[1;33m,[0m[1;33m[0m[1;33m[0m[0m

[1;31mFileNotFoundError[0m: [Errno 2] No such file or directory: './dataset/kddcup.data_10_percent_corrected'
FileNotFoundError: [Errno 2] No such file or directory: './dataset/kddcup.data_10_percent_corrected'

